{"remainingRequest":"/Users/ht.mi/个人资料/研究生资料/HiRegEx/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ht.mi/个人资料/研究生资料/HiRegEx/FrontEnd/src/views/EditorView/ElementComposition.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ht.mi/个人资料/研究生资料/HiRegEx/FrontEnd/src/views/EditorView/ElementComposition.vue","mtime":1719644436801},{"path":"/Users/ht.mi/个人资料/研究生资料/HiRegEx/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1719645450753},{"path":"/Users/ht.mi/个人资料/研究生资料/HiRegEx/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1719645450707},{"path":"/Users/ht.mi/个人资料/研究生资料/HiRegEx/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1719645450753},{"path":"/Users/ht.mi/个人资料/研究生资料/HiRegEx/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1719645453149}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import { mapState, mapMutations } from 'vuex';\n    import EleNode from './EleNode.vue';\n\nexport default {\n  name: 'ElementComposition',\n  components: {\n    EleNode\n  },\n  props: {\n    elementCompositionExpression:{\n      type: Array\n    }\n  },\n  data() {\n    return {\n        test: 100,\n        visible: false,\n\n    }\n  },\n  beforeMount(){\n    console.log('elementCompositionExpression', this.elementCompositionExpression)\n  },\n  mounted() {\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n    ]),\n    pathCompute(){\n      var x1 = 0\n      var y1 = 3\n      var x2 = 0\n      var y2 = 27\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + x2 + \" \" + y2 );\n    },\n    pathTranslate(){\n      return \"translate(75, 0)\" \n    }\n   \n  },\n    watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_NODE_DEFINITION_STATE',\n    ]),\n    computeExistKey(d){\n        return 'exist' + d\n    },\n    computeAllKey(d){\n        return 'all' + d\n    },\n    computeExistItemKey(d){\n        return 'existItem' + d\n    },\n    commonTransform1(test, index){\n        return `translate(${0}, ${0})`\n    },\n    commonTransform2(x, y){\n        return `translate(${0}, ${0})`\n    },\n    leftBracketCompute(x1, y1, x2, y2)\n\t{\n            var qx = x1-(y2-y1)/3\n            var qy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n    },\n    rightBracketCompute(x1, y1, x2, y2)\n\t{\n        var qx = x1+(y2-y1)/3\n        var qy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n    },\n    updateSelectedElementComposition() {\n        this.UPDATE_SELECTED_DOM(this.elementCompositionExpression)\n    },\n    updateSelectedExist(d) {\n        this.UPDATE_NODE_DEFINITION_STATE(true)\n        this.UPDATE_SELECTED_DOM(d)\n    },\n    updateSelectedAll(d){\n      this.UPDATE_NODE_DEFINITION_STATE(true)\n      this.UPDATE_SELECTED_DOM(d)\n    },\n    selectedStyle(d){\n        if(d.key == this.selectedDomKey){\n            return ( \"fill: red !important; \" + \n                     \"stroke-width: 0px;\");\n        }\n    },\n    elementCompositionCheck(){\n      if(this.elementCompositionExpression['exist']['composition'].length + this.elementCompositionExpression['all']['composition'].length>0)\n        return true\n      return false\n    },\n    addExist(){\n      sysDatasetObj.addExist()\n    },\n    addAll(){\n      sysDatasetObj.addAll()\n    }\n\n  }\n}\n",{"version":3,"sources":["ElementComposition.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"ElementComposition.vue","sourceRoot":"src/views/EditorView","sourcesContent":["<template>\n<div class=\"re-elementComposition\">\n    <a class=\"elecomp-text\">EleComp:</a>\n    <div v-for=\"(item1, index1) of elementCompositionExpression\" :key=\"computeExistKey(index1)\" style=\"height: 90%; display: flex; flex-direction: row;\">\n                <svg style=\"width:51px;\">\n                    <text v-if=\"item1['type']=='exist'\" :transform=\"commonTransform1(item1, index1)\" style=\"alignment-baseline: hanging; font-size: 30px\">∃</text>\n                    <text v-if=\"item1['type']=='all'\" :transform=\"commonTransform2(item1, index1)\" style=\"alignment-baseline: hanging; font-size: 30px\">∀</text>\n                    <EleNode :nodeExpression=\"item1['node']\"></EleNode>\n                </svg>\n                <div class=\"input-list\" style=\"display:flex; flex-direction:column; left:0px; width:8px;\">\n                  <input v-if=\"item1['type']=='exist'\" class=\"attr-input1\" type=\"text\" name=\"ticketNum\" v-model=\"item1['repeat'][0]\">\n                  <input v-if=\"item1['type']=='exist'\" class=\"attr-input2\" type=\"text\" name=\"ticketNum\" v-model=\"item1['repeat'][1]\">\n                </div>\n                <svg v-if=\"item1['type']=='exist'\" style=\"position:relative; width: 2%; left: 13px; width:31px;\">\n                  <path :d=\"pathCompute\" style=\" stroke: #000000; stroke-width: 3px; fill: none;\"/>\n                </svg>\n                <svg v-if=\"item1['type']=='all'\" style=\"position:relative; width: 2%; left: 13px;  width:31px;\">\n                  <path :d=\"pathCompute\" style=\" stroke: #000000; stroke-width: 3px; fill: none;\"/>\n                </svg>\n    </div>\n    <el-tooltip class=\"navitem\" key=\"add\" content=\"add component\" effect=\"light\" style=\"position:relative; left: 0px; margin-top: 5px;\">\n            <div slot=\"content\">\n              <span class=\"navitem\" @click=\"addExist()\">\n                  Exist\n              </span>\n              <span class=\"navitem\" @click=\"addAll()\">\n                  All\n              </span>\n            </div>\n            <i class=\"el-icon-circle-plus-outline\"></i>\n    </el-tooltip>\n</div>\n</template>\n\n<script>\n    import { mapState, mapMutations } from 'vuex';\n    import EleNode from './EleNode.vue';\n\nexport default {\n  name: 'ElementComposition',\n  components: {\n    EleNode\n  },\n  props: {\n    elementCompositionExpression:{\n      type: Array\n    }\n  },\n  data() {\n    return {\n        test: 100,\n        visible: false,\n\n    }\n  },\n  beforeMount(){\n    console.log('elementCompositionExpression', this.elementCompositionExpression)\n  },\n  mounted() {\n  },\n  computed: {\n    ...mapState([\n      'displayMode',\n      'selectedDom',\n    ]),\n    pathCompute(){\n      var x1 = 0\n      var y1 = 3\n      var x2 = 0\n      var y2 = 27\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" L \" + x2 + \" \" + y2 );\n    },\n    pathTranslate(){\n      return \"translate(75, 0)\" \n    }\n   \n  },\n    watch: {\n      displayMode: function() {\n        console.log('displayMode')\n      },\n  },\n  methods: {\n    ...mapMutations([\n      'UPDATE_SELECTED_DOM',\n      'UPDATE_NODE_DEFINITION_STATE',\n    ]),\n    computeExistKey(d){\n        return 'exist' + d\n    },\n    computeAllKey(d){\n        return 'all' + d\n    },\n    computeExistItemKey(d){\n        return 'existItem' + d\n    },\n    commonTransform1(test, index){\n        return `translate(${0}, ${0})`\n    },\n    commonTransform2(x, y){\n        return `translate(${0}, ${0})`\n    },\n    leftBracketCompute(x1, y1, x2, y2)\n\t{\n            var qx = x1-(y2-y1)/3\n            var qy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n    },\n    rightBracketCompute(x1, y1, x2, y2)\n\t{\n        var qx = x1+(y2-y1)/3\n        var qy = (y2+y1)/2\n\n    \treturn ( \"M \" +  x1 + \" \" +  y1 +\n         \t\t\" Q \" + qx + \" \" + qy + \" \" + x2 + \" \" + y2 );\n    },\n    updateSelectedElementComposition() {\n        this.UPDATE_SELECTED_DOM(this.elementCompositionExpression)\n    },\n    updateSelectedExist(d) {\n        this.UPDATE_NODE_DEFINITION_STATE(true)\n        this.UPDATE_SELECTED_DOM(d)\n    },\n    updateSelectedAll(d){\n      this.UPDATE_NODE_DEFINITION_STATE(true)\n      this.UPDATE_SELECTED_DOM(d)\n    },\n    selectedStyle(d){\n        if(d.key == this.selectedDomKey){\n            return ( \"fill: red !important; \" + \n                     \"stroke-width: 0px;\");\n        }\n    },\n    elementCompositionCheck(){\n      if(this.elementCompositionExpression['exist']['composition'].length + this.elementCompositionExpression['all']['composition'].length>0)\n        return true\n      return false\n    },\n    addExist(){\n      sysDatasetObj.addExist()\n    },\n    addAll(){\n      sysDatasetObj.addAll()\n    }\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n.re-elementComposition {\n    position: absolute;\n    top:0%;\n    left: 0%;\n    height: 100%;\n    width: 100%;\n    overflow-y: auto;\n    display: flex;\n    flex-direction: row;\n    .elecomp-text{\n      margin-left: 5px;\n      margin-top: 3px;\n      margin-right: 20px;\n      font-size: 1rem;\n      font-weight: bold;\n      color: black;\n    }\n    .attr-input1{\n        width: 18px;\n        height: 10px;\n        background-color: transparent;\n        border: 0;\n        outline: none;\n        font-size: 5px;\n    }\n    .attr-connect{\n        font-size: 1.5rem;\n        font-weight: 200;\n        text-anchor: middle;\n        color: #606266;\n    }\n    .attr-input2{\n        width: 18px;\n        height: 10px;\n        margin-top: 8px;\n        background-color: transparent;\n        border: 0;\n        outline: none;\n        font-size: 5px;\n    }\n    .ele-add-icon{\n      cursor: pointer;\n      &:hover{\n          fill: steelblue;\n      }\n    }\n    .navitem {\n      height: 1em;\n      font-size: 20px;\n      cursor: pointer;\n      &:hover {\n        background: #eeeeee;\n      }\n    }\n\n\n}\n</style>\n"]}]}